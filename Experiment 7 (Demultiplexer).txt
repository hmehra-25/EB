To design and implement a 1:4 demultiplexer. Code : 
module demux_1_to_4 ( 
input D, // Data input 
input S0, S1, // Selection lines 
output Y0, Y1, Y2, Y3 // Outputs 
); 
// Implement the 1:4 DEMUX logic assign Y0 = ~S1 & ~S0 & D; 
assign Y1 = ~S1 & S0 & D; 
assign Y2 = S1 & ~S0 & D; 
assign Y3 = S1 & S0 & D; 
endmodule 
Test Bench Code 
module demux_1_to_4_tb; 
reg D; // Data input 
reg S0, S1; // Selection lines 
wire Y0, Y1, Y2, Y3; // Outputs 
// Instantiate the 1:4 DEMUX 
demux_1_to_4 uut ( 
.D(D), 
.S0(S0), 
.S1(S1), 
.Y0(Y0), 
.Y1(Y1), 
.Y2(Y2), 
.Y3(Y3)
); 
// Test all combinations 
initial begin 
$display("S1 S0 | D | Y0 Y1 Y2 Y3"); 
$display(" "); 
D = 1; 
S1 = 0; S0 = 0; #10 $display(" %b %b | %b | %b %b %b %b", S1, S0, D, Y0, Y1, Y2, Y3); S1 = 0; S0 = 1; #10 $display(" %b %b | %b | %b %b %b %b", S1, S0, D, Y0, Y1, Y2, Y3); S1 = 1; S0 = 0; #10 $display(" %b %b | %b | %b %b %b %b", S1, S0, D, Y0, Y1, Y2, Y3); S1 = 1; S0 = 1; #10 $display(" %b %b | %b | %b %b %b %b", S1, S0, D, Y0, Y1, Y2, Y3); 
$finish; 
end 
endmodule
